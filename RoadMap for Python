Introduction
  what is python?
  why python?
  python scripting vs shell scripting

COMMENTS IN PYTHON
  single line comment use #

CREATING PYTHON VARIABLE:
  variables : Its a container which can hold a data inside it as value.
  NOTE: variable are case sensitive
        can't use space in between
        can't start with number and special symbols

DATATYPE USER - INPUT
  DataType:  
  Test-type: string (str)
  Numeric Types: Integer(int), float, complex
  sequence Types: List, tuple, range
  Mapping Type: Dictionries(dict)
  Set Types: Set, Frozenset
  Boolean Type: Bool, True, False
  Binary: Bytes, Bytearray, Memoryview.
  evaluate: eval -> mathematical operation, python function operation.

Type-casting and Substring:
  Implicit: Python itself convert one of the data type  
  Explicit: Where the user convert one datatype to another. 

PROBLEM QUESTION TILL NOW:
1. Write a program to display a person's name, age and address in the three different line.
2. Write a program to swap a two variable.
3. Write a program to convert a float into integer.
4. Write a program to take a details from the student for ID-card and then print it in the different lines.
5. Write a program to take an user input as integer then convert it into float.

OPERATORS AND OPERANDS:
Operands: indicates what operation is to be performed.
a, x, y
Operators: indicated on what the action or the operation should be performed
+, -, * ...

OPERATORS:
  Arthimetic: addition(+), sub(-), mul(*), Division(/), Exponentiation(**), Floor division(//) -> in quotient before decimal point, Modulus (%)
  Assignment: ==, +=, -=, *=.  
  Comparision: lesser than (<), Equal to (==), Greater than or equal to(>=), Greater than (>), Less than  or equal to(<=), Not equal to(!=). 
  Logical: and, or, not.
  Bitwise: AND (&), OR(|), XOR(^), Zero fill left shift (<<), zero fill right shift (>>)
  Identity: Is, Is not
  Membership: check the presence of a sequence in a object 
              In, not in

Conditional:
  if statement
  if - else statement
  if - else - elif statement 
  nested statement
  short hand statement: if <condition> : <body of if> 
  short hand if else statement: <body of if> if <condition> else <body of else> 

PROBLEM SOLVING:
1. Write a program to check the number is positive or not
2. Write a program to check the number is odd or even
3. Write a program to create area calculator
4. Write a program check wheather the passed letter is vowel or not
5. Write a program check if the number is single digit or not upto 5 digits.

-----------------------------------------------------------------------------------------------------------------------

INTRODUCTION TO LOOPS:
Types of loops:
  1. For loops
  2. While loops
  3. While True
  4. Nested loops

For loop: The loop that repeats something in a given range.
          The range of the starting point, and step gap in that
          add ending point while defining the range.
Syntax:
      for (variable) in range(1,6)

While loops:
          While loop executive till the given condition is True.
          in While loop increment is dine inside 
Syntax:
      while <body>
      while <condition>  
          <body of while loop>
          <Increment>

While True:
      Its a infinite loop
      To break a while True loop, break statement is used.

Nested loop: Loop inside the loop is nested loop.
             Nested loop is used to solve the patern problem.

For loop with conditional statement:
      Use If-else statement increase the ability of the loop to complete the task.

Break and Continus Statement:
    Continus statement: Its used when you want to skip the perticular statement.
    Break statement: Used when you want to destroy the loop at the perticular condition and come out of the loop.


PROBLEM SOLVING QUESTION FOR TH LOOPS PART-1:
1. Write the program to find sum of all even number up to 50.
2. Write the program to write first 20 numbers and there squared numbers.
3. Write the program to find first 10 odd number using while loop.
4. Write the program to check if the number is divisible by 8 and 20 upto 100.
5. Write the program to create a billing system at supermarket

PROBLEM SOLVING QUESTION FOR TH LOOPS PART-2:
A = "Why fit in, when you are bourn to stand out"
1. Write the program to find the length of the following string.
2. Write the program to check how many times alphabet "o" is occuring.
3. Write the program to convert the whole string into lower and uper case.
4. Write the program to convert the following string into a title.
5. Write the program to find index number of "fit" in.

---------------------------------------------------------------------------------------------------------------

Strings: Strings are the combination of number, symbols and letters, enclosed inside quotions.
Functions in strings part-1: 
1. length
2. count
3. upper
4. lower
5. index 
6. capitalize -> convert first letter into capital
7. casefold -> convert string into lower case
8. find -> find index of the number character    eg: print(a.find("a",15,34))
9. format {}  -> to write a variable inside a string    eg: a= "my name is {}"   print(a.format(a))
10. center(20, "*") -> fill the given character and centralizes a string

Function in strings part-2
1. isalnum - return true if all character in the string are alphanumeric
   print(a,a.isalnum())
2. isalpha - return true if all character in the stringare in alphabets
3. isdecimal - return true if all character in the string in decimal
4. isdegit - return true if all character in the string are in degit
5. isnumeric - return true if all character in the string are numeric
6. islower - check if the string is lower or not 
7. isupper - return true if all character in the string are upper
8. isspace - return true if all character in the string are whitespace (full string should be in whitespace)
9. istitle - return true if all character in the string (all first letter should be in capital)

Function in strings part-3
1. ljust  -> return the left justified version of string 
2. rjust  -> return the right justified version of string
3. startswith()  -> returns true if the string starts with the specific value  
4. endswith  -> returns true if the string ends with the specific value
   print(a.endswith("r",10.12))
5. swapcase()  -> lower case become upper case and upper become lower, vice versa.
6. strip()  -> return a trimmed version of the string (remove the extra spaces or dot or * in the string)
   print(a.strip("*,"))
7. split()  -> split the string at the specific separator, returns a list.
8. replace()  -> return the string with the specific value is replaced with a specific value.
9. rindex()  -> searches the string for a specified value and returns the last position of where it was found (basicaly to check the index number if the given)
10. rfind()  -> searches the string in a specified value and returns



Slicing in strings:
  1. string slicing


PROBLEM SOLVING:
  1. write a program to get febonnacci series up to 10 number.
  2. write a program to check if the number is prime or not
  3. write a program to find the palindrom 
  4. write a program to create an calculator

PROBLEM SOLVING:
  A = "OOTD.YOLO.ASAP.BRB.GTG.OTW"
  1. write a program to seperate the following string into comma(,) separated values.
  2. write a program to sort string alphanumerically in python
  3. write a program to remove a given character from the string.
     Z = "F.R.I.E.N.D.S"
  4. write a program to remove the dot(.) from the following string
  5. write a program to check the number of occurrence substring in a string

PROBLEM SOLVING:
  1. Take a input from the user as a string then, reverse it.
  2. write a program to check if a string contains only digits
  3. write a program to check if a string is a palindrom
  4. write a program to find the number vowels in a string
  5. write a program to check if every word in a string begins with a capital letter

Lists:
  Lists are the collection of ordered and mutable data
  * List are written inside the square bracket
  * the value inside the list are written in bracket
  * mutable means once created, they can be changed
  * multiple datatypes can be written inside a list

Slicing Lists:

List Iteration:
  * Iteration using for loop
  * Iteration using for loop with range and length
  * Iteration using while loop
  * using Short-Hand for loop


List Functions Part (1):
  1. To find the length of a list
  2. To count a occurence of a perticular element
  3. To add to the list 
  4. To add the specific location
  5. To remove from a list
  6. To remove from a certain location


List Functions Part (1):
  1. To create a copy of the list
  2. To access the element
  3. To entend the list
  4. To reverse the list
  5. To sort the list
  6. To clear all the data from the list

PROBLEM SOLVING:

A = ["Rose","Rachel", "Monica", "Joe"]
  1. Write a program to swap first and fourth element.
  2. Write a program to add new value at second position.
  3. Write a program to delete a value from 3rd position.
B = [13, 7, 12, 10]
  1. Write a program to multiply all the number in the list.
  2. Write a program to get the largest number from the list.
  3. Write a program to get the smallest number from the list.



TUPLES:

Tuples are the collection of ordered and un-mutable data.
  * For tuple no brackets are mandatory. By choice one can use parentheses.
  * The inside a Tuple is seperated  by comma(,)
  * Once created, typles cannot be changed.
  * Multiple datatypes can be written inside tuples.

Slicing and ItEration in TUPLES:

  * with for loop
  * alog with range and length in for loop
  * with while loop

CONVERSION OF TUPLES AND TUPLES FUNCTION:


PROBLEM SOLVING:














Python topics:
print()
input function
variable
variable naming rule
type error & type conversion

Data Type
Type checking
operators & operands


operands:
number or variable or a letter

List and List function
Nested list
random module
index error

DATA STRUCTURE 
  Lists
  Tuples
  Sets
  Dictionaries

LOOPS:
  for loop
  while loop
break, continue, pass

OOPS:
  class and object
  self __init__()
  class method

OOPS CONCEPTS:
  inheritance
  abstraction
    abstract class and abstract method
    access modifier
  encapsulation
  polymorphism

PACKAGE MANAGEMENT:
  pip and pypi


indentation

round()
f-string
range()


functions:
functions with arguments
type of arguments
function with returns

print vs returns

local and global variable

global keywords


file handeling

modules

operator overloading
method overloading

if __name__=='__main__"

python turtle

