Introduction
  what is python?
  why python?
  Python IDEs (Integrated Development Environments)
  python scripting vs shell scripting
  Hello World Program
  Python Syntax

COMMENTS IN PYTHON
  single line comment use #
  multi line comments '''    '''

CREATING PYTHON VARIABLE:
  variables : Its a container which can hold a data inside it as value.
  NOTE: variable are case sensitive
        can't use space in between
        can't start with number and special symbols
  

DATATYPE USER - INPUT
  DataType:  
  1. Test-type: string (str)
  2. Numeric Types: Integer(int), float, complex
  3. sequence Types: List, tuple, range
  4. Mapping Type: Dictionries(dict)
  5. Set Types: Set, Frozenset
  6. Boolean Type: Bool, True, False
  7. Binary: Bytes, Bytearray, Memoryview.
  8. evaluate: eval -> mathematical operation, python function operation.

Type-casting and Substring:
  1. Implicit: Python itself convert one of the data type  
  2. Explicit: Where the user convert one datatype to another. 

Input/Output
  Printing Output
    print("Hello, World!")
    print("Python is fun!")

  Getting Input from User
    input()
  
  Formatting Output: Using str.format()
    name = "Alice"
    age = 30
    print("Name: {}, Age: {}".format(name, age))

  Using f-Strings (Formatted String Literals)
    name = "Bob"
    age = 25
    print(f"Name: {name}, Age: {age}")

  Reading and Writing Files: 
    Opening Files
    -> Use the open() function to open a file. The open() function takes two arguments: the file name and the mode (e.g., read, write, append).

    file = open('example.txt', 'r')  # open for reading
    file = open('example.txt', 'w')  # open for writing
    file = open('example.txt', 'a')  # open for appending

  Reading from a File
  Reading Line by Line
  Writing to a File
  Appending to a File
  Using with Statement
  Working with CSV Files
  Writing to CSV Files
  Using csv.DictReader and csv.DictWriter
  Working with JSON Files
  Writing to JSON Files
















PROBLEM QUESTION TILL NOW:
1. Write a program to display a person's name, age and address in the three different line.
2. Write a program to swap a two variable.
3. Write a program to convert a float into integer.
4. Write a program to take a details from the student for ID-card and then print it in the different lines.
5. Write a program to take an user input as integer then convert it into float.


###################################################################################################################################################


OPERATORS AND OPERANDS:

Operands: indicates what operation is to be performed.
a, x, y
Operators: indicated on what the action or the operation should be performed
+, -, * ...

OPERATORS:
  Arthimetic: 
    1. addition(+), 
    2. sub(-), 
    3. mul(*), 
    4. Division(/), 
    5. Exponentiation(**), 
    6. Floor division(//) -> in quotient before decimal point, 
    7. Modulus (%)  -> reminder

  Assignment: 
    1. equal to (==)
    2. +=, 
    3. -=, 
    4. *=.

  Comparision: 
    1. lesser than (<), 
    2. Equal to (==), 
    3. Greater than or equal to(>=), 
    4. Greater than (>), 
    5. Less than  or equal to(<=), 
    6. Not equal to(!=).

  Logical: 
    1. and, -> both should be true
    2. or,  -> any one should be true
    3. not. 

  Bitwise: 
    1. AND (&), 
    2. OR(|), 
    3. XOR(^), 
    4. Zero fill left shift (<<), 
    5. zero fill right shift (>>)

  Identity: 
    1. Is,
    2. Is not

  Membership: check the presence of a sequence in a object 
    1. In, 
    2. not in

----------------------------------------------------------------------------------------------------------------------------------------------------------


Control Flow
    if, elif, else Statements (Conditional)
    for Loops
    while Loops
    break and continue Statements
    pass Statement

Conditional:
  1. if statement
  2. if - else statement
  3. if - else - elif statement 
  4. nested statement
  5. short hand statement: if <condition> : <body of if> 
  6. short hand if else statement: <body of if> if <condition> else <body of else> 

PROBLEM SOLVING:
1. Write a program to check the number is positive or not
2. Write a program to check the number is odd or even
3. Write a program to create area calculator
4. Write a program check wheather the passed letter is vowel or not
5. Write a program check if the number is single digit or not upto 5 digits.


####################################################################################################################################################


INTRODUCTION TO LOOPS:
Types of loops:
  1. For loops
  2. While loops
  3. Nested loops

For loop: The loop that repeats something in a given range.
          The range of the starting point, and step gap in that
          add ending point while defining the range.
Syntax:
      for (variable) in range(1,6)

While loops:
          While loop executive till the given condition is True.
          in While loop increment is define inside 
Syntax:
      while <body>
      while <condition>  
          <body of while loop>
          <Increment>

While True:
      Its a infinite loop
      To break a while True loop, break statement is used.

Nested loop: Loop inside the loop is nested loop.
             Nested loop is used to solve the patern problem.

For loop with conditional statement:
      Use If-else statement increase the ability of the loop to complete the task.

Break and Continus Statement:
    Continus statement: Its used when you want to skip the perticular statement.
    Break statement: Used when you want to destroy the loop at the perticular condition and come out of the loop.


PROBLEM SOLVING QUESTION FOR TH LOOPS PART-1:
1. Write the program to find sum of all even number up to 50.
2. Write the program to write first 20 numbers and there squared numbers.
3. Write the program to find the sum of first 10 odd number using while loop.
4. Write the program to check if the number is divisible by 8 and 20 upto 100.
5. Write the program to create a billing system at supermarket

PROBLEM SOLVING QUESTION FOR TH LOOPS PART-2:
A = "Why fit in, when you are bourn to stand out"
1. Write the program to find the length of the following string.
2. Write the program to check how many times alphabet "o" is occuring.
3. Write the program to convert the whole string into lower and uper case.
4. Write the program to convert the following string into a title.
5. Write the program to find index number of "fit" in.


##############################################################################################################################################

STRINGS:

Strings: Strings are the combination of number, symbols and letters, enclosed inside quotions.

FUNCTION IN STIRNGS PART-1: 

1. length
2. count
3. upper
4. lower
5. index 
6. capitalize -> convert first letter into capital
7. casefold -> convert string into lower case
8. find -> find index of the number character    eg: print(a.find("a",15,34))
9. format {}  -> to write a variable inside a string    eg: a= "my name is {}"   print(a.format(a))
10. center(20, "*") -> fill the given character and centralizes a string

-------------------------------------------------------------------------------------------------------------------------------------------

FUNCTION IN STIRNGS PART-2: 

a="hello"
b="Hello123"
c="123456"
d="HELLO"
e=" "
f="Hello 123@"
g=" 1.234"

1. isalnum - return true if all character in the string are alphanumeric
   print(a,a.isalnum())
2. isalpha - return true if all character in the stringare in alphabets
3. isdecimal - return true if all character in the string in decimal
4. isdegit - return true if all character in the string are in degit
5. isnumeric - return true if all character in the string are numeric
6. islower - check if the string is lower or not 
7. isupper - return true if all character in the string are upper
8. isspace - return true if all character in the string are whitespace (full string should be in whitespace) only space
9. istitle - return true if all character in the string (all first letter should be in capital)

-------------------------------------------------------------------------------------------------------------------------------------------

FUNCTION IN STIRNGS PART-3: 

a = "Harry Porter"
1. endswith  -> returns true if the string ends with the specific value (case sensitive)
   print(a.endswith("r",10,12)) 
2. startswith()  -> returns true if the string starts with the specific value  (case sensitive)
3. swapcase()  -> lower case become upper case and upper become lower, vice versa.
4. strip()  -> return a trimmed version of the string (remove the extra spaces or dot or * in the string)
   print(a.strip())  # remove unessary the empty spaces from the string
   print(a.strip("*,"))
5. split()  -> split the string at the specific separator, returns a list.
   a=("#OFOTD#BRB#OMY#TB")
   print(a.split())
   print(a.split("#"))  # --> output in list
       note: in string its should be there what is in split() like her #
6. ljust  -> return the left justified version of string 
   x=a.ljust(20,"*")
   print(x, "is my favorite movie")  # --> after "a" the left shift by some spaces or a mention symbols.
7. rjust  -> return the right justified version of string. 
8. replace()  -> return the string with the specific value is replaced with a specific value.
   a="my name is john"
   print(a.replace("john","lisa")) # --> this not only for one work, it works for entire string.
9. rindex()  -> searches the string for a specified value and returns the last position of where it was found (basicaly to check the index number if the given)
   a="my name is john"
   print(a.rindex("john"))
10. rfind()  -> searches the string in a specified value and returns


-------------------------------------------------------------------------------------------------------------------------------------------


Slicing in strings:
  1. string slicing
a="harry porter and the goblet of fire"
print(a[0:7])
print(a[0:7:2])
print(a[::-1])  -> reverse the string

PROBLEM SOLVING:
  1. write a program to get febonnacci series up to 10 number.
  2. write a program to check if the number is prime or not
  3. write a program to find the palindrom 
  4. write a program to create area of calculator

-------------------------------------------------------------------------------------------------------------------------------------------

PROBLEM SOLVING:
A = "OOTD.YOLO.ASAP.BRB.GTG.OTW"
  1. write a program to seperate the following string into comma(,) separated values.
          b=a.split(",")
          print(b)    -> gives the output in list with comma separated
  2. write a program to sort string alphanumerically in python   
          a = input("enter anything : ")
          print(sorted(a))    -> output in list in alphabetically.
          o/p: ['.', '.', '.', '.', '.', 'A', 'A', 'B', 'B', 'D', 'G', 'G', 'L', 'O', 'O', 'O', 'O', 'O', 'P', 'R', 'S', 'T', 'T', 'T', 'W', 'Y']
  3. write a program to remove a given character from the string.
      Z = "F.R.I.E.N.D.S"
      b = Z.replace("D","")    -> we cant remove istead we can use replace
  4. write a program to remove the dot(.) from the following string
      b = Z.replace(".","")    -> we cant remove istead we can use replace
  5. write a program to check the number of occurrence substring in a string
      a = "she sells seashells on the sea shore"
      b = a.count("sea")

-------------------------------------------------------------------------------------------------------------------------------------------

PROBLEM SOLVING:
  1. Take a input from the user as a string then, reverse it.
     a=input()
     print(::-1)
  2. write a program to check if a string contains only digits
     a= a.isdigit()
  3. write a program to check if a string is a palindrom
     print(a[::-1])
  4. write a program to find the number vowels in a string
     vowels = 0
     for i in a:
       if i==1 or i== 0....
  5. write a program to check if every word in a string begins with a capital letter
     print(a.istitle())


ADDITIONAL PROBLEM QUESTIONS:

  Reverse a String:
  Count Vowels and Consonants:
  Check Palindrome:
  Check Anagrams:
  Count Words in a String:
  Capitalize Words:
  Remove Duplicates:


6:01

##################################################################################################################################################

LISTS:
  Lists are the collection of ordered[indexing] and mutable data
  * List are written inside the square bracket []
  * the value inside the list are written in bracket
  * mutable means once created, they can be changed
  * multiple datatypes can be written inside a list

--------------------------------------------------------------------------------------------------------------------------------------------------

SLICING LISTS:

A = [ "Hulk", "Thor", "Ironman", "Captain America"]

print(A[1])
print(A[1:])
print(A[:5])
print(A[::2])
print(A[-3:-1])

--------------------------------------------------------------------------------------------------------------------------------------------------

LIST ITERATION:

  * Iteration using for loop
    A = [ "Hulk", "Thor", "Ironman", "Captain America"]
    for i in A:
      print(i)

  * Iteration using for loop with range and length
    A = [ "Hulk", "Thor", "Ironman", "Captain America"]
    for i in range(len(a)):
      print(a[i])   -> in range perticular element

  * Iteration using while loop
    i=0
    while i<(len(a))
      print(a[i])
      i=i+1
  * using Short-Hand for loop
    [print(i) for i in a]

--------------------------------------------------------------------------------------------------------------------------------------------------

LIST FUNCTIONS PART (1):

A = [ "Hulk", "Thor", "Ironman", "Captain America"]
  1. To find the length of a list
      print(A)
      print(len(A))   #-> in numbers
  2. To count a occurence of a perticular element
      print(A.count("Hulk"))    
  3. To add to the list 
      A.append("spiderman")
  4. To add the specific location
      A.insert(1,"spiderman")
      print(A)      
  5. To remove from a list
      A.remove("spiderman")
  6. To remove from a certain location
      A.pop(1)

--------------------------------------------------------------------------------------------------------------------------------------------------

LIST COMPREHENSION:

Eg:
  l1=[13, 2, 35, 23]
  l2=[]
  for i in l1:
    l2.append(i)
  print(l2)

In one line:
l3=[i for i in l1 if i > 45]
print(l3)

One more method by list constructor:
l3=list(l1)
print(l2)

--------------------------------------------------------------------------------------------------------------------------------------------------
LIST FUNCTIONS PART (2):

A = [ "Hulk", "Thor", "Ironman", "Captain America"]

  1. To create a copy of the list
      l1=[13, 2, 35, 23]
      l2=[]
      l2=l1.copy()
      print(l2)

  2. To access the element
      print(A.index("Ironman")

  3. To entend the list
      c=["vivsion", "spiderman"]
      A.extend(c)
      print(A)

  4. To reverse the list
      A.reverse()
      print(A)

  5. To sort the list
      A.sort()
      print(A)  -> in alphabetically

  6. To clear all the data from the list
      A.clear()
      print(A)  -> clear the list, and make the list empty

--------------------------------------------------------------------------------------------------------------------------------------------------

PROBLEM SOLVING:

A = ["Rose","Rachel", "Monica", "Joe"]

  1. Write a program to swap first and fourth element.
      A[0],A[3]=A[3],A[0]
      print(A)

  2. Write a program to add new value at second position.
      A.insert(1,"phoebe")
      print(A)

  3. Write a program to delete a value from 3rd position.
      A.pop(2)
      print(A)



B = [13, 7, 12, 10]

  1. Write a program to multiply all the number in the list.
      mul=1
      for i in B:
        mul=i*mul
      print(mul)

NOTE:
      mul=1
      for i in B:
        r=i*mul  -> her r will be overwritten
      print(r)

  2. Write a program to get the largest number from the list.
      B.sort()  -> a - z
      ln=B[-1]  -> her -1 means last number after sort which is the largest
      print(ln)

  3. Write a program to get the smallest number from the list.
      B.sort()  -> a - z
      ln=B[0]  -> her 0 means first index number after sort which is the smallest
      print(ln)

###############################################################################################################################################

TUPLES:

Tuples are the collection of ordered and un-mutable data.
  * For tuple no brackets are mandatory. By choice one can use parentheses.
  * The inside a Tuple is seperated  by comma(,)
  * Once created, typles cannot be changed.
  * Multiple datatypes can be written inside tuples.

Example of tuple:
  a=("apple","mango","banana", "promagranate", 1, 2, 6.7)
  a="apple","mango","banana", "promagranate", 1, 2, 6.7
  a="orange",    -> comma is very important or else its a string

empty tuple:  tuple that contain no element
  a=()    


-------------------------------------------------------------------------------------------------------------------------------------------


SICING AND ITERATION IN TUPLES:

a=("oneplus", "redmi", "samsung", "nothing")
print(a[2])
print(a[1:3])
print(a[:3])  -> oneplus to samsung
print(a[2:])  -> samsung and nothing
print(a[::2])  -> gap of 2 (redmi and nothing)
print(a[::-1])  -> reverse
print(a[-1])  -> nothing
print(a[2::-1])  -> samsung to oneplus


a=("oneplus", "redmi", "samsung", "nothing")

  * with for loop
      for i in a:
        print(i)  -> gives the value of index like 0,1,2,3

  * along with range and length in for loop
      for i in len(a):
        print(a[i])  -> gives name in vertical forms

  * with while loop
      i=0
      while i < len(a):
        print(a[i])
        i=i+1

-------------------------------------------------------------------------------------------------------------------------------------------

CONVERSION OF TUPLES AND TUPLES FUNCTION:

tuple to list and append it then back to tuple:

a=("oneplus", "redmi", "samsung", "nothing")
print(type(a))   
b=list(a)
print(b)
b.append("realme")
print(type(b))   
print(b)
a=tuple(b)
print(type(a))   
print(a)

a=("oneplus", "redmi", "samsung", "nothing")
a.count("redmi")  -> 1
a.index("redmi")  -> 1

---------------------------------------------------------------------------------------------------------------------------------------------

PROBLEM SOLVING:

1. Convert the following dictionary into JSON format.
   Student_data={"name":"David","age":13,"mark": 87}
  
    import json
    Student_data={"name":"David","age":13,"mark": 87}
    print(type(Student_data))  -> here now its dictionay
    data = json.dump(Student_data)  -> convert dict/list into formatted string
    print(data)
    print(type(data))  -> it now in string

2. Access the value of the age from the given data
   Student_data={"name":"David","age":13,"mark": 87}

    import json
    Student_data="""{"name":"David","age":13,"mark": 87}"""  -> string
    data = json.loads(Student_data)  -> json.loads convert only work with string not directly into dict 
    print(data["age"])


3. Pretty print following JSON data
    import json   
    Student_data={"name":"David","age":13,"mark": 87}
    data = json.dumps(student_data, indent = 4, separators = (",","="))
    print(data)

4. Sort the follwoing keys and write them into file
    Student_data={"name":"David","age":13,"mark": 87}
    ?
    ?
    
5. Access the nested key marks from the following nested data
     import json
     student_data = """{ "student":
                        {"grade":
                          {"name": "David", "marks": 87}
                        }
                     }""" 
    data = json.loads(student_data)
    print(data["student"]["grade"]["marks"])


#############################################################################################################################################

INTRODUCTION TO DICTIONARY:

Dictionary: 
  Dictionary allows user to write the data in the form of keys and values.
    * Dictionary are enclosed inside curly brackets {}
    * Keys and Values are spearated by colon
    * Every key value pair is separated by a comma(,)

Syntax:
  Employee_data = {"name": "John", "age": 24, "gender": "male"}
  print(Employee_data["gender"]) -> her we won't use index, we use key access value

------------------------------------------------------------------------------------------------------------------------------------------

ITERATION IN DICTIONARY:
  * Iteration in dictionary:
      students_data = {"name": "John", "class": "6th", "roll_no":"23"}
  
  * Print all the key names one by one:
      for x in students_data:
        print(x) -> will get all the keys
  
  * Print all the key names one by one:
      for x in student_data:
        print(students[x])

  * Using value function:
      for x in student_data.values():
        print(x)
  
  * Using Items function:
      for x,y in students_data.items():
        print(x ":" y)

-----------------------------------------------------------------------------------------------------------------------------------------

DICTIONARY FUNCTIONS PART - 1:

students_data = {"name": "John", "class": "6th", "roll_no":"23"}

1. get:
    x = students_data.get("name")
    print(x)

2. items: -> need output in tuple
    x = students_data.items()
    print(x)

3. keys:
    x = students_data.keys()
    print(x)

4. values:
    x = students_data.values()
    print(x)

5. copy:
    x = students_data.keys()
    print(x)


--------------------------------------------------------------------------------------------------------------------------------------------

DICTIONARY FUNCTIONS PART - 2:

students_data = {"name": "John", "class": "6th", "role_no":23}

1. setdefault - gievn the exact value even after we give wrong value
    students_data = {"name": "John", "class": "6th", "role_no":23}
    X = students_data.setdefalut("role_no",24)
    print(X)     -> you will get 23 as output

2. update
    students_data = {"name": "John", "class": "6th", "role_no":23}
    students_data.update({"roll_no": 24})
    print(students_data) - output will be updated 23 to 24

  without update function: (which will add one more) 
    students_data["role_no"] = 24
    print(students_data)

IMPORTANT TRICKY QUESTION
3. pop
    students_data = {"name": "John", "class": "6th", "roll_no":23}
    X=students_data.pop("roll_no")
    print(X)
    print(students_data)


4. popitem
5. clear


###################################################################################################################################################################

NESTED DICTIONARIES: 

A dictionary can contain dictionaries, this is called nested dictionaries.

----------------------------------------------------------------------------------------------------------------------------------------------------

PROBLEM SOLVING:

    1. WRITE A PYTHON PROGRAM TO SORT A DICTIONARY BY VALUE
       a = {"a": 12, "b": 23, "c": 6, "d": 91, "e": 45}
       a = sorted(a.values())
       print(a)

    SORT ALL THE DICT GIVEN
       a = {"a": 12, "b": 23, "c": 6, "d": 91, "e": 45}
       b = sorted(a.items(), key = lambda item: item[1])   # lambda function extracts the value for sorting
       print(b)

    2. WRITE A PYTHON SCRIPT TO PRINT A DICTIONARY WHERE THE KEYS ARE NUMBERS BETWEEN 1 AND 15 AND THE VALUES ARE SQUARE OF KEYS.
       a = {}
       for i in range(1,16):
          a[i] = i**2
       print(a)


    3. WRITE A PROGRAM TO MULTIPLY ALL THE ITEMS IN A DIRECTORY
       a = {"a": 1, "b": 2, "c": 3, "d": 4, "e": 5}
       product = 1
       for i in a:
         product = a[i]
       print(product)
   

    4. WRITE A PROGRAM TO SORT A  DICTIONARY BY KEY
       a = {12 : "a", 32 : "b", 73 : "c", 24 : "d", 15 : "e"}
       b = sorted(a.keys())
       # b = dict(sorted(a.items()))   -> dict() directly iterate to the iterable the key value pairs
       print(b)



###########################################################################################################################################################

INTRODUCTION TO SETS:

SETS: Sets are unordered collection of data. 
      Every element inside the set is unique and mutable.

* Sets are written inside the curly brackets
* The value inside the set is separated by (,)
* Mutable means once created, they can be changed
* Every output in set will be in different order

#######################################################################################################################################################

SETS FUNCTION

Sets are the unordered collection of data. 
Every element inside the side is unique and mutable.
* Sets are written inside the curly brackets
* The value inside a set is separated by coma(,)
* Mutable means once created, they can be changed

Syntax:
  a = {"Ironman", "Hulk", "Thor", "Captain America"}
  print(a)
  for i in a:
    print(i)

------------------------------------------------------------------------------------------------------------------------------------------------

SETS FUNCTION PART-1 :

  1. ADD
     a = {"Ironman", "Hulk", "Thor", "Captain America"}
     a.add("spiderman")    -> # Which will be unorderly added (refresh the order will be changed)
     print(a)

  2. POP  -> ramdomly delete any item from the set
     a = {"Ironman", "Hulk", "Thor", "Captain America"}
     a.pop()
     print(a)

  3. REMOVE  -> to remote oerticular element
     a = {"Ironman", "Hulk", "Thor", "Captain America"}
     a.remove("Ironman")
     print(a)

  4. DISCARD  -> same as remove but term is different

  5. COPY
     a = {"Ironman", "Hulk", "Thor", "Captain America"}
     b=a.copy()
     print(b)


------------------------------------------------------------------------------------------------------------------------------------------------

SETS FUNCTION PART-2 :

  1. isdisjoint:  -> checks one elements should not be in other with output in boolean 
     a = {"Ironman", "Hulk", "Thor", "Captain America"}
     b = {"spider man", "batman", "wonder-women"}
     c = {"huld", "thor"}
     print(a.isdisjoint(b))  -> True  # elements in "a" doesnot matched with element "b" is its disjoint
     print(a.isdisjoint(c))  -> False  # elements in "a" matched with element "c" is its not disjoint


  2. issubset:
     a = {"Ironman", "Hulk", "Thor", "Captain America"}
     b = {"spider man", "batman", "wonder-women"}
     c = {"huld", "thor"}
     print(c.issubset(a))  -> True # all elements of "c" are present in "a"
     print(c.issubset(b))  -> False # all the elements of "c" are not present in "a"


  3. isupperset: The elements in A are there in C, where A is superset
     a = {"Ironman", "Hulk", "Thor", "Captain America"}
     b = {"spider man", "batman", "wonder-women"}
     c = {"huld", "thor"}
     print(a.issuperset(c))   -> True


  4. update:  -> recomended to create a variable
     a = {"Ironman", "Hulk", "Thor", "Captain America"}
     b = {"spider man", "batman", "wonder-women"}
     c = {"huld", "thor", "spider man"}
     a.update(c)
     print(a)
     

  5. clear:   -> to make the set empty
     a = {"Ironman", "Hulk", "Thor", "Captain America"}
     b = {"spider man", "batman", "wonder-women"}
     c = {"huld", "thor", "spider man"}
     a.clear()
     print(a)



------------------------------------------------------------------------------------------------------------------------------------------------

SETS FUNCTION PART-3 :

1. union    # no need of creating a new variable  (all prints once even after there is twice both from and A and B)
    A={1,2,3,4,5}
    B={4,5,6,7,8}
    C={3,7,8,9,0}
    print(A.union(C))
    

2. difference    # In A and B set display only A element not even the commons once (remove the common ones as well)
    A={1,2,3,4,5}
    B={4,5,6,7,8}
    C={3,7,8,9,0}
    print(A.difference(C))


3. difference update    # update in the orginal set doesn't create a new one a.diffrence.update(c) (removes the elements in 'c' from 'a')
    A={1,2,3,4,5}
    B={4,5,6,7,8}
    C={3,7,8,9,0}
    A.difference_update(C)
    print(A)


4. Intersection    # Only the common values  (no need of using variable for intersection)
    A={1,2,3,4,5}
    B={4,5,6,7,8}
    C={3,7,8,9,0}
    print(A.intersection(C))


5. Intersectin update    # update the set with new set from the intersection
    A={1,2,3,4,5}
    B={4,5,6,7,8}
    C={3,7,8,9,0}
    A.intersection_update(C)
    print(A)


6. symentric difference    # Return the new set, In 2 sets the common will be excluded and rest will be in one set without updateing into new one
    A={1,2,3,4,5}
    B={4,5,6,7,8}
    C={3,7,8,9,0}
    print(A.symantric_difference(C))


7. symentric difference update    # update the orginal set
    A=[1,2,3,4,5}
    B={4,5,6,7,8}
    C={3,7,8,9,0}
    A.symantric_difference_update(C)
    print(A)


------------------------------------------------------------------------------------------------------------------------------------------------

PROBLEM SOLVING SET:

1. WRITE A PROGRAM TO FIND A MAX AND MIN IN A SET
2. WRITE A PROGRAM TO FIND COMMON ELEMENTS IN THREE LISTS USING SETS
3. WRITE A PROGRAM TO FIND DIFFERENCE BETWEEN 2 SETS
4. WRITE A PYTHON PROGRAM TO REMOVE AN ITEM FROM A SET IF IT IS PRESENT IN SET
5. WRITE A PYTHON PROGRAM TO CHECK IF A SET IS SUBSET OF ANYOTHER SET


1. WRITE A PROGRAM TO FIND A MAX AND MIN IN A SET
    A={12, 56, 34, 8, 90, 1, 57}
    print(max(A))


2. WRITE A PROGRAM TO FIND COMMON ELEMENTS IN THREE LISTS USING SETS
    A=[1,2,3,4,5]
    B=[4,5,6,7,8]
    C=[3,7,8,9,0]
    print(set(A) & set(B) & set(C))    # set() will convert from list to set and "&" will collect the common once  (output will be in set)


3. WRITE A PROGRAM TO FIND DIFFERENCE BETWEEN 2 SETS
    A={1,2,3,4,5}
    B={4,5,6,7,8}
    print(A.difference(B))


4. WRITE A PYTHON PROGRAM TO REMOVE AN ITEM FROM A SET IF IT IS PRESENT IN SET
    A = { 1, 5, 6, 8, 2 }
    A.discard(8)
    print(A)


5. WRITE A PYTHON PROGRAM TO CHECK IF A SET IS SUBSET OF ANYOTHER SET
    A={ 1, 2, 3, 4, 5 }
    B={2, 4, 5}
    print(B.issubset(A))    # all items in B are present in A so output is true



#############################################################################################################################################################

FUNCTIONS: 

Functions are a set of code, which once created they can be used throughout the program.
Funtions help break our program into smaller part and help it look more organized and manageable

There are 2 types of functions:
  1. define a function
  2. calling a function


------------------------------------------------------------------------------------------------------------------------------------------------

PARAMETERS AND ARGUMENSTS: 

PARAMETERS: 
Parameters are variables written inside the parentheses with the name function

ARGUMENSTS:
Arguments are the values passed to the parameters while calling the function


FUNCTION SYNTAX:

  def name_of_function(Parameters)
      BODY (.....)
    
  function_call_by_function_name(Arguments)

  Arbitary arguments means can pass multiple arguments when the function si called under tuple


------------------------------------------------------------------------------------------------------------------------------------------------

RETURN STATEMENT AND RECURSION IN FUNCTIONS:

RETURN: Return in Keyword in python is used to exit a function and return the value of the function


RECURSION: Resursion is the most commonly used mathematical and programming concept. 
           In simple words, recursion means function can call itself, giving us a benefits of looping through data in order to get a result   


------------------------------------------------------------------------------------------------------------------------------------------------

Example for recursion:

    def fact(n):
        if n==1:
            return 1
        else:
            return(n*fact(n-1))
    print(fact(5))

------------------------------------------------------------------------------------------------------------------------------------------------

ADVANTAGES:
  1. They make the code look clean and orgamized
  2. By the use of recursive functions, a complex task can be broken down into small sub - parts
  3. Sequence generation becomes easier

DISADVANTAGES:
  1. Recusrive Functions take up a lot of memory
  2. Sometimes the logic becomes hards to follow


#############################################################################################################################################################

LAMBDA FUNCTION:
-> It is used when an anonymous function is required for a short period of time
-> It can take numerous arguments
-> It can only have one expression

STRUCTURE OF LAMBDA:
1.
  a = lambda b: b*5
  print(a(4))

2.
  x = lambda a,b,c: (a+b)*c
  print(x(3,4,5))


#############################################################################################################################################################

GLOBAL AND LOCAL VARIABLES: 

GLOBAL VARIABLE: 
-> Variables declared outside of any function or class.
-> Available throughout the entire code, including inside functions.
-> They can be accessed and modified by any function in the script.

SYNTAX:
  # Global variable
  x = 10

  def print_global():
      print("Global variable x:", x)  # Accessing global variable

  print_global()  # This will print: Global variable x: 10

------------------------------------------------------------------------------------------------------------------------------------------------

LOCAL VARIABLES:
-> Variables declared inside a function.
-> Available only within that function.
-> They cannot be accessed outside of the function in which they are defined.

SYNTAX: 

  def print_local():
      # Local variable
      y = 5
      print("Local variable y:", y)  # Accessing local variable

  print_local()  # This will print: Local variable y: 5

  # Attempting to access y outside the function will result in an error
  # print(y)  # This will raise: NameError: name 'y' is not defined


#############################################################################################################################################################

PROBLEM SOLVING:

1. WRITE A FUNCTION TO FIND MAIMUM OF THREE NUMBERS OF PYTHON
2. WRITE A PYTHON FUNCTION TO CREATE AND PRINT A LIST WHERE THE VALUES ARE SEQEUNCE OF NUMBER BETWEEN 1 AND 30
3. WRITE A PYTHON FUNCTION THAT TAKES A NUMBER AS A PAARMETER AND CHECK IF THE NUMBER IS PRIME OR NOT
4. WRITE A PYTHON FUNCTION TO SUM ALL TH NUMBERS IN A LIST
5. WRITE A PYTHON PROGRAM TO SOLVE THE FIBONACCI SEQUIENCE USING RESURSION


1. WRITE A FUNCTION TO FIND MAIMUM OF THREE NUMBERS OF PYTHON
   def num(a,b,c):
       if a> b and a >c:
           print("a is greater",a)
       elif b>a and b>c:
           print("b is greater", b)
       else:       
           print("c is greater",c)
   num(5,12,91)



2. WRITE A PYTHON FUNCTION TO CREATE AND PRINT A LIST WHERE THE VALUES ARE SQUARE OF NUMBER BETWEEN 1 AND 30
   def square():
     result = []
     for i in range(1,31):
       square.append(i**2)
     return result
   print(square())

If we need to the square root result in between 1 to 30
   def square():
     result = []
     for i in range(1,31):
       s = i**2
       if 1<=s<=30:
         result.append(s)
     return result
   print(square())



3. WRITE A PYTHON FUNCTION THAT TAKES A NUMBER AS A PAARMETER AND CHECK IF THE NUMBER IS PRIME OR NOT

   def prime_number(num):
       if num == 1:
           print("not a prime")
       if num == 2:
           print("not a prime")
       if num>2:
           for i in range(2,num):
               if num % i==0:
                   print("Its a prime number")
                   break              
           else:
               print("not a prime")
   prime_number(10)



4. WRITE A PYTHON FUNCTION TO SUM ALL TH NUMBERS IN A LIST
   def sum(num):
      total = 0
      for i in num:
        total+=i #(total=total+1) 
      return total
   print(sum([12,54,13,3, 5]))



5. WRITE A PYTHON PROGRAM TO SOLVE THE FIBONACCI SEQUIENCE USING RESURSION
   def fibonacci(num):
     if num == 1:
       return 1
     elif num == 2:
       return 1
     else:
       return (fibonacci(num-1) + fibonacci(num-2))
   print(fibonacci(9))












Python topics:
print()
input function
variable
variable naming rule
type error & type conversion

Data Type
Type checking
operators & operands


operands:
number or variable or a letter

List and List function
Nested list
random module
index error

DATA STRUCTURE 
  Lists
  Tuples
  Sets
  Dictionaries

LOOPS:
  for loop
  while loop
break, continue, pass

OOPS:
  class and object
  self __init__()
  class method

OOPS CONCEPTS:
  inheritance
  abstraction
    abstract class and abstract method
    access modifier
  encapsulation
  polymorphism

PACKAGE MANAGEMENT:
  pip and pypi


indentation

round()
f-string
range()


functions:
functions with arguments
type of arguments
function with returns

print vs returns

local and global variable

global keywords


file handeling

modules

operator overloading
method overloading

if __name__=='__main__"

python turtle

